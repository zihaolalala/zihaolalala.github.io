{"meta":{"title":"zihaolalala的博客","subtitle":"个人博客","description":"zihaolalala的博客","author":"zihaolalala","url":"https://zihaolalala.github.io"},"pages":[],"posts":[{"title":"推荐系统——Wipe-and-Deep模型","slug":"推荐系统——Wipe-and-Deep模型","date":"2019-06-13T07:54:57.000Z","updated":"2019-06-13T08:05:00.598Z","comments":true,"path":"MechineLearning/推荐系统——Wipe-and-Deep模型/","link":"","permalink":"https://zihaolalala.github.io/MechineLearning/推荐系统——Wipe-and-Deep模型/","excerpt":"","text":"##1. 稀疏特征 优点： 有效，广泛用于工业界 缺点： 需要人工设计 可能过拟合，所有特征都叉乘，相当于记住每一个样本 泛化能力差，没出现过就不会起效果 ##2. 稠密特征 优点： 带有语义信息，不同向量之间有相关性 兼容没有出现过的特征组合 更少人工参与 缺点： 过度泛化，推荐不怎么相关的产品（预测不怎么相关的值）","categories":[{"name":"MechineLearning","slug":"MechineLearning","permalink":"https://zihaolalala.github.io/categories/MechineLearning/"}],"tags":[]},{"title":"稀疏特征与稠密特征的优缺点","slug":"稀疏特征与稠密特征的优缺点","date":"2019-06-13T07:37:02.000Z","updated":"2019-06-13T07:51:01.414Z","comments":true,"path":"MechineLearning/稀疏特征与稠密特征的优缺点/","link":"","permalink":"https://zihaolalala.github.io/MechineLearning/稀疏特征与稠密特征的优缺点/","excerpt":"","text":"##1. 稀疏特征 优点： 有效，广泛用于工业界 缺点： 需要人工设计 可能过拟合，所有特征都叉乘，相当于记住每一个样本 泛化能力差，没出现过就不会起效果 ##2. 稠密特征 优点： 带有语义信息，不同向量之间有相关性 兼容没有出现过的特征组合 更少人工参与 缺点： 过度泛化，推荐不怎么相关的产品（预测不怎么相关的值）","categories":[{"name":"MechineLearning","slug":"MechineLearning","permalink":"https://zihaolalala.github.io/categories/MechineLearning/"}],"tags":[]},{"title":"如何缓解梯度消失","slug":"如何缓解梯度消失","date":"2019-06-12T14:22:18.000Z","updated":"2019-06-13T07:43:59.177Z","comments":true,"path":"MechineLearning/如何缓解梯度消失/","link":"","permalink":"https://zihaolalala.github.io/MechineLearning/如何缓解梯度消失/","excerpt":"","text":"##1. 什么是梯度消失开始训练时，loss值不下降 ##2. 使用归一化缓解梯度消失 使用BatchNormalization，可在激活前或后使用 使用selu激活函数，此函数自带归一化功能 注意事项： 归一化后接Dropout会破环归一化效果，应该使用AlphaDropout，它不会改变数据的均值和方差","categories":[{"name":"MechineLearning","slug":"MechineLearning","permalink":"https://zihaolalala.github.io/categories/MechineLearning/"}],"tags":[]},{"title":"使用服务器上的jupyter notebook环境","slug":"使用服务器上的jupyter notebook环境","date":"2019-06-11T09:59:47.000Z","updated":"2019-06-11T11:28:00.432Z","comments":true,"path":"python/使用服务器上的jupyter notebook环境/","link":"","permalink":"https://zihaolalala.github.io/python/使用服务器上的jupyter notebook环境/","excerpt":"","text":"####1. 在服务器上安装jupyter notebook123456conda install jupyter# 生成配置文件（~/.jupyter/jupyter_notebook_config.py）jupyter notebook --generate-config``` ####2. 修改配置文件 编辑~/.jupyter/jupyter_notebook_config.py，添加:c.NotebookApp.ip = ‘0.0.0.0’ # 任意ip可访问c.NotebookApp.open_browser = False # 不自动打开浏览器c.NotebookApp.port = 8888c.NotebookApp.notebook_dir = ‘/media/xijie2t/‘ # notebook根目录c.NotebookApp.token = ‘’ # 不使用token ####3. 启动notebook ```jupyter notebook","categories":[{"name":"python","slug":"python","permalink":"https://zihaolalala.github.io/categories/python/"}],"tags":[{"name":"jupyter notebook","slug":"jupyter-notebook","permalink":"https://zihaolalala.github.io/tags/jupyter-notebook/"}]},{"title":"git常用命令","slug":"git常用命令","date":"2019-06-01T12:15:28.000Z","updated":"2019-06-01T12:25:09.811Z","comments":true,"path":"null/git常用命令/","link":"","permalink":"https://zihaolalala.github.io/null/git常用命令/","excerpt":"","text":"创建仓库init # 在本地创建一个空仓库```122. #### 关联远程仓库 git remote add origin https://github.com/zihaolalala/zihaolalala.github.io.gitgit remote # 查看远程仓库123. #### 创建本地分支 git branch master # 创建本地分支master分支git branch -a # 查看本地和远程所有分支123 4. #### 获取仓库中的文件 ```git pull origin master # 获取远程仓库origin的master分支 1-4步的工作相当于：clonelink126. #### 切换分支 git checkout master127. #### 推送 git statusgit add .git push origin mastergit commit -m “message”`","categories":[],"tags":[]},{"title":"Anaconda的使用","slug":"Anaconda的使用","date":"2019-05-31T13:39:40.000Z","updated":"2019-06-01T11:54:55.947Z","comments":true,"path":"Anaconda/Anaconda的使用/","link":"","permalink":"https://zihaolalala.github.io/Anaconda/Anaconda的使用/","excerpt":"","text":"创建环境create -n tf2.0 python12345678910112. #### 查看现有环境 ```conda info --envs``` 3. #### 激活环境 ```source activate tf2.0``` 4. #### 删除环境 ```conda remove -n tf2.0 --all``` 5. #### 修改环境名 conda create -n tf1.8 –clone tf2.0 # 克隆原有环境，起新环境名conda remove -n tf2.0 –all # 删除原有环境126. #### 搜索包 pip search tensorflow-gpuconda search tensorflow-gpu127. #### 安装与卸载包 pippip install tensorflow-gpu==2.0.0-alpha0pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu==2.0.0-alpha0 # 镜像下载pip uinstall tensorflow-gpu condaconda install tensorflow-gpuconda uinstall tensorflow-gpu 8. #### 添加Anaconda的TUNA镜像 ```conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ 设置搜索时显示通道地址conda config --set show_channel_urls yes","categories":[{"name":"Anaconda","slug":"Anaconda","permalink":"https://zihaolalala.github.io/categories/Anaconda/"}],"tags":[{"name":"Anaconda","slug":"Anaconda","permalink":"https://zihaolalala.github.io/tags/Anaconda/"}]},{"title":"Ubuntu16.04安装Tensorflow2.0","slug":"Ubuntu16.04安装Tensorflow2.0","date":"2019-05-31T12:49:50.000Z","updated":"2019-06-01T12:59:23.762Z","comments":true,"path":"Tensorflow/Ubuntu16.04安装Tensorflow2.0/","link":"","permalink":"https://zihaolalala.github.io/Tensorflow/Ubuntu16.04安装Tensorflow2.0/","excerpt":"","text":"下载安装Anaconda 创建python环境 ‘’’conda create -n tf2.0 python=3.6’’’ 激活环境 ‘’’source activate tf2.0 # linux os’’’ 安装Tensorflow2.0 install tensorflow-gpu1235. #### 安装cudatoolkit、cudnn ```conda install 注意 安装好后运测试程序，若失败，跟据错误提示安装好对应的CUDA版本","categories":[{"name":"Tensorflow","slug":"Tensorflow","permalink":"https://zihaolalala.github.io/categories/Tensorflow/"}],"tags":[{"name":"Tensorflow","slug":"Tensorflow","permalink":"https://zihaolalala.github.io/tags/Tensorflow/"}]},{"title":"","slug":"TCP三次握手","date":"2019-03-19T11:27:38.840Z","updated":"2019-03-19T11:30:00.757Z","comments":true,"path":"null/TCP三次握手/","link":"","permalink":"https://zihaolalala.github.io/null/TCP三次握手/","excerpt":"","text":"title: TCP三次握手toc: truedate: 2019-03-19T19:27:38.000Zdescription: nulltags: TCP 三次握手categories: 计算机网络 TCP报文格式","categories":[],"tags":[]},{"title":"JAVA并发编程","slug":"JAVA并发编程","date":"2019-03-19T05:59:42.000Z","updated":"2019-03-19T06:01:07.703Z","comments":true,"path":"网络编程/JAVA并发编程/","link":"","permalink":"https://zihaolalala.github.io/网络编程/JAVA并发编程/","excerpt":"","text":"","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://zihaolalala.github.io/categories/JAVA/"},{"name":"网络编程","slug":"网络编程","permalink":"https://zihaolalala.github.io/categories/网络编程/"}],"tags":[{"name":"Concurrent","slug":"Concurrent","permalink":"https://zihaolalala.github.io/tags/Concurrent/"},{"name":"JAVA","slug":"JAVA","permalink":"https://zihaolalala.github.io/tags/JAVA/"}]},{"title":"目标检测算法效果对比","slug":"目标检测算法效果对比","date":"2019-03-04T14:06:50.000Z","updated":"2019-03-04T14:33:10.391Z","comments":true,"path":"object-detection/目标检测算法效果对比/","link":"","permalink":"https://zihaolalala.github.io/object-detection/目标检测算法效果对比/","excerpt":"","text":"1. Cascade R-CNN: Delving into High Quality Object Detection 在 COCO test-dev 数据集上对比多个 state-of-the-art 单模型目标检测器. (The entries denoted by * used bells and whistles at inference) 在多个流行 baseline object detectors 中使用 cascade 的效果对比（检测速度为单张图片在单个Titan XP GPU上计算的时间）","categories":[{"name":"deep learning","slug":"deep-learning","permalink":"https://zihaolalala.github.io/categories/deep-learning/"},{"name":"object detection","slug":"object-detection","permalink":"https://zihaolalala.github.io/categories/object-detection/"}],"tags":[{"name":"deep learning","slug":"deep-learning","permalink":"https://zihaolalala.github.io/tags/deep-learning/"},{"name":"object detection","slug":"object-detection","permalink":"https://zihaolalala.github.io/tags/object-detection/"}]},{"title":"Java TCP Socket的使用","slug":"Socket的使用","date":"2019-02-25T14:01:31.000Z","updated":"2019-02-27T11:44:36.619Z","comments":true,"path":"网络编程/Socket的使用/","link":"","permalink":"https://zihaolalala.github.io/网络编程/Socket的使用/","excerpt":"","text":"Java TCP Socket使用示例","categories":[{"name":"java","slug":"java","permalink":"https://zihaolalala.github.io/categories/java/"},{"name":"网络编程","slug":"网络编程","permalink":"https://zihaolalala.github.io/categories/网络编程/"}],"tags":[{"name":"tcp","slug":"tcp","permalink":"https://zihaolalala.github.io/tags/tcp/"},{"name":"socket","slug":"socket","permalink":"https://zihaolalala.github.io/tags/socket/"},{"name":"java","slug":"java","permalink":"https://zihaolalala.github.io/tags/java/"}]},{"title":"使用hexo搭建个人博客","slug":"使用hexo搭建个人博客","date":"2019-02-25T08:02:51.000Z","updated":"2019-02-25T14:00:20.214Z","comments":true,"path":"hexo/使用hexo搭建个人博客/","link":"","permalink":"https://zihaolalala.github.io/hexo/使用hexo搭建个人博客/","excerpt":"","text":"下载安装node.js 下载安装git 在github中新建空仓库 仓库命名为zihaolalala.github.io 安装hexo 1npm install -g hexo-cli 初始化博客 1234mkdir /home/zihaolalala/blog cd /home/zihaolalala/blog hexo init npm install 下载并更换主题 从hexo主题中选择喜欢的主题，找到此主题的github仓库地址，如Hueman主题的地址: https://github.com/ppoffice/hexo-theme-hueman.gitgit clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 修改blog/_config.yml文件: theme: hueman 修改博客配置文件 跟据自己的信息修改blog/_config.yml中的其它配置 跟据自己的信息修改blog/themes/human/_config.yml中的配置 写作 新建文章命令，后面的是文章标题hexo new 使用hexo搭建个人博客 打开’blog/souce/_posts/使用hexo搭建个人博客’，开始写文章 生成静态页面 hexo g 本地查看博客 开启本地服务器hexo s 访问https://localhost:4000 推送到远程仓库 安装模块npm install -s hexo-deployer-git 修改blog/_config.yml文件: 部署hexo d 访问博客主页zihaolalala.github.io","categories":[{"name":"hexo","slug":"hexo","permalink":"https://zihaolalala.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zihaolalala.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://zihaolalala.github.io/tags/博客/"}]}]}